name: CI
env:
  DEBUG: napi:*
  APP_NAME: tokei-core
  MACOSX_DEPLOYMENT_TARGET: '10.13'
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              pnpm build:rs
              strip -x crates/tokei-core/*.node
          - host: windows-latest
            build: pnpm build:rs
            target: x86_64-pc-windows-msvc
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              pnpm build:rs --target aarch64-apple-darwin
              strip -x crates/tokei-core/*.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              pnpm build:rs --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip crates/tokei-core/*.node
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Pnpm Cache
        uses: ./.github/actions/pnpm-cache
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-registry
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: crates/tokei-core/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  # test-macOS-windows-binding:
  #   name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       settings:
  #         - host: windows-latest
  #           target: x86_64-pc-windows-msvc
  #       node:
  #         - '14'
  #         - '16'
  #         - '18'
  #   runs-on: ${{ matrix.settings.host }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node }}
  #         check-latest: true
  #     - name: Pnpm Cache
  #       uses: ./.github/actions/pnpm-cache
  #     - name: Install dependencies
  #       run: pnpm install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-${{ matrix.settings.target }}
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: pnpm test
  # test-linux-x64-gnu-binding:
  #   name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - '14'
  #         - '16'
  #         - '18'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node }}
  #         check-latest: true
  #     - name: Pnpm Cache
  #       uses: ./.github/actions/pnpm-cache
  #     - name: Install dependencies
  #       run: pnpm install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-x86_64-unknown-linux-gnu
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim pnpm test
  # test-linux-x64-musl-binding:
  #   name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - '14'
  #         - '16'
  #         - '18'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node }}
  #         check-latest: true
  #     - name: Pnpm Cache
  #       uses: ./.github/actions/pnpm-cache
  #     - name: Install dependencies
  #       run: |
  #         pnpm config set supportedArchitectures.libc "musl"
  #         pnpm install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-x86_64-unknown-linux-musl
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine pnpm test
  # test-linux-aarch64-gnu-binding:
  #   name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - '14'
  #         - '16'
  #         - '18'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
  #     - uses: actions/checkout@v3
  #     - name: Pnpm Cache
  #       uses: ./.github/actions/pnpm-cache
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-aarch64-unknown-linux-gnu
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Install dependencies
  #       run: |
  #         pnpm config set supportedArchitectures.cpu "arm64"
  #         pnpm config set supportedArchitectures.libc "glibc"
  #         pnpm install
  #     - name: Setup and run tests
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: ghcr.io/napi-rs/napi-rs/nodejs:aarch64-${{ matrix.node }}
  #         options: '-v ${{ github.workspace }}:/build -w /build'
  #         run: |
  #           set -e
  #           pnpm test
  #           ls -la
  # test-linux-aarch64-musl-binding:
  #   name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
  #     - uses: actions/checkout@v3
  #     - name: Pnpm Cache
  #       uses: ./.github/actions/pnpm-cache
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-aarch64-unknown-linux-musl
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Install dependencies
  #       run: |
  #         pnpm config set supportedArchitectures.cpu "arm64"
  #         pnpm config set supportedArchitectures.libc "musl"
  #         pnpm install
  #     - name: Setup and run tests
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: multiarch/alpine:aarch64-latest-stable
  #         options: '-v ${{ github.workspace }}:/build -w /build'
  #         run: |
  #           set -e
  #           apk add nodejs npm pnpm
  #           pnpm test
  # test-linux-arm-gnueabihf-binding:
  # name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
  # needs:
  #   - build
  # strategy:
  #   fail-fast: false
  #   matrix:
  #     node:
  #       - '14'
  #       - '16'
  #       - '18'
  # runs-on: ubuntu-latest
  # steps:
  #   - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
  #   - uses: actions/checkout@v3
  #   - name: Pnpm Cache
  #     uses: ./.github/actions/pnpm-cache
  #   - name: Download artifacts
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: bindings-armv7-unknown-linux-gnueabihf
  #       path: .
  #   - name: List packages
  #     run: ls -R .
  #     shell: bash
  #   - name: Install dependencies
  #     run: |
  #       pnpm config set supportedArchitectures.cpu "arm"
  #       pnpm install
  #   - name: Setup and run tests
  #     uses: addnab/docker-run-action@v3
  #     with:
  #       image: ghcr.io/napi-rs/napi-rs/nodejs:armhf-${{ matrix.node }}
  #       options: '-v ${{ github.workspace }}:/build -w /build'
  #       run: |
  #         set -e
  #         pnpm test
  #         ls -la
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
    #   - test-macOS-windows-binding
    #   - test-linux-x64-gnu-binding
    #   - test-linux-x64-musl-binding
    #   - test-linux-aarch64-gnu-binding
    #   - test-linux-aarch64-musl-binding
    #   - test-linux-arm-gnueabihf-binding
    steps:
      - uses: actions/checkout@v3
      - name: Pnpm Cache
        uses: ./.github/actions/pnpm-cache

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Move artifacts
        run: pnpm artifacts
      - name: Build packages
        run: pnpm build:js
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: pnpm release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js 16
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: Install Dependencies
  #       run:

  #     - name: Create Release Pull Request
  #       uses: changesets/action@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
